"""
两位玩家: player1 and player2
每位玩家都有一副手牌和一个牌库，在每回合开始时，每位玩家都从牌库中抽一张牌。如果牌库为空，则输掉游戏。卡片有名称，攻击属性和防御属性，每回合每位玩家各自从手牌中选择一张牌，选牌属性高的玩家获胜。卡牌属性如下所示：

自己打出卡牌的攻击属性 - （对手打出卡牌的防御属性 / 2）

例如，假设玩家1打出一张2000 ATK/1000 DEF的卡，玩家2打出一张1500 ATK/3000 DEF的卡。
他们的卡的总属性计算如下:

P1: 2000 - 3000/2 = 2000 - 1500 = 500
P2: 1500 - 1000/2 = 1500 - 500 = 1000

player2 win 

第一位赢得8回合的玩家获得最终胜利

添加额外属性让游戏更有趣

卡片分为导师（tutor）、助教（TA）和教授(professor)三种类型，每种类型在使用时都有不同的效果。
在该回合中，所有效果都在计算总属性之前应用:

tutor将导致对手弃牌并重新抽手中的前3张牌。
TA会交换对手牌的进攻和防御属性。
professor将对手牌的攻击和防御属性添加到他们牌库中的所有牌中，然后移除对手牌库中共享其攻击或防御的所有牌!

-------------------------------
Player 类
一个player实例有三个属性
name: player's name 当你玩游戏时，你可以输入你的名字，它将被转换成一个字符串传递给构造函数
deck: Deck 类的实例 可以使用 .draw()方法从牌库中抽牌
hand: 关于 Card 实例的列表，开始时，每个玩家应从自己的牌组中抽出5张牌，在游戏过程中，手牌中的每张牌都可以通过列表中的索引来选择，当玩家从牌组中抽到一张新牌时，它会被添加到手牌列表的末尾。

完成 Player 构造函数的实现，以便将 self.hand 设置为从玩家牌库中抽取的 5 张牌的列表。
接下来，在Player类中实现draw和play方法。
使用 draw 方法从牌库中抽一张牌添加到玩家手牌中。
play方法在给定索引处从玩家手中移除并返回一张牌。

Tips:
在实现Player.__init__和Player.draw时调用deck.draw()。

__init__:
    初始话玩家手牌
    从牌库中抽5张牌，使用deck.draw()方法

draw():
    从玩家手牌中抽一张指定索引的牌，并返回这张牌
-------------------------------
effect 方法

Tutors   
让对手弃掉手中的前3张牌，然后再抽3张新牌
假设对手有至少三张手牌和牌库至少有三张牌

TAs: Shift

交换对手卡牌的防御和攻击属性

profess:
将对手牌的攻击和防御添加到玩家牌组中的所有牌中，
然后移除对手牌组中与对手牌具有相同攻击或防御的所有牌。
"""

